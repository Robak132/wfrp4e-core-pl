{
    "label": "Makra",
    "folders": {
        "Trappings": "Przedmioty"
    },
    "entries": {
        "Check Careers!": {
            "id": "X6PfKZ7ycRJhb6yX",
            "name": "Sprawdź Profesje!",
            "command": "const onlyOnline = true;\nconst api = game.modules.get(\"forien-armoury\")?.api.checkCareers;\n\nif (game.user.isGM) api.checkPlayersCareers(onlyOnline);\nelse api.checkMyCareer();"
        },
        "Check Careers! (all)": {
            "id": "MrggtmSEdMnNgOL2",
            "name": "Sprawdź Profesje! (Wszystkie)",
            "command": "const onlyOnline = false;\nconst api = game.modules.get(\"forien-armoury\")?.api.checkCareers;\n\nif (game.user.isGM) api.checkPlayersCareers(onlyOnline);\nelse api.checkMyCareer();"
        },
        "Check Careers! (deprecated)": {
            "id": "2K9t6CBMBWonY3Y8",
            "name": "Sprawdź Profesje! (nie używać)",
            "command": "const checkOnlyOnlinePlayers = false;\n\n\nlet characters = [];\n\nif (game.user.isGM) {\n\tlet users = game.users.filter(u => u.isGM === false);\n\tif (checkOnlyOnlinePlayers) {\n\t\tusers = users.filter(u => u.active === true);\n\t}\n\tcharacters = users.map(u => u.character);\n} else if (game.user.character) {\n\tcharacters.push(game.user.character);\n}\n\ncharacters.forEach(character => {\n\tlet currentCareer = character.currentCareer;\n\tlet careerLevel = currentCareer.level.value;\n\tlet requiredAdvances = careerLevel * 5;\n\t\n\tif (currentCareer.complete.value === true) {\n\t\treturn;\n\t}\n\t\n\t/* check characteristics */\n\tlet doneCharacteristics = 0;\n\tlet totalCharacteristics = 0;\n\tcurrentCareer.characteristics.forEach(ch => {\n\t\tlet advances = character.characteristics[ch].advances;\n\t\tif (advances >= requiredAdvances)\n\t\t\tdoneCharacteristics++;\n\t\ttotalCharacteristics++;\n\t});\n\t\n\t/* check talents */\n\tlet doneTalents = 0;\n\tlet potentialTalents = [];\n\tcharacter.itemCategories.talent.forEach(talent => {\n\t\tif (currentCareer.talents.includes(talent.name))\n\t\t\tdoneTalents++\n\t\telse if (talent.advances.indicator)\n\t\t\tpotentialTalents.push(talent.name)\n\t});\n\t\n\t/* check skills */\n\tlet doneSkills = 0;\n\tlet potentialSkills = [];\n\tcharacter.itemCategories.skill.forEach(skill => {\n\t\tif (skill.advances.value < requiredAdvances) return;\n\t\tif (currentCareer.skills.includes(skill.name))\n\t\t\tdoneSkills++\n\t\telse if (skill.advances.indicator)\n\t\t\tpotentialSkills.push(skill.name)\n\n\t});\n\t\n\t/* prepare Chat Message */\n\tlet owners = [];\n\tif (game.user.isGM) {\t\t\n\t\tfor (id in character.ownership) {\n\t\t\tif (character.ownership[id] === 3 && id !== game.user.id)\n\t\t\t\towners.push(id);\n\t\t}\n\t} else {\n\t\towners = game.users.filter(u => u.isGM === true);\n\t}\n\t\n\t\n\tlet potentialSkillsInfo = '';\n\tlet potentialTalentsInfo = '';\n\tlet characteristicsComment = '';\n\tlet skillsComment = '';\n\tlet talentsComment = '';\n\tlet conclusion = `You can't complete your career yet.`; \n\t\n\t\n\tif (potentialSkills.length > 0)\npotentialSkillsInfo = `<p><em>You also have <a class=\"content-link\" data-tooltip=\"${potentialSkills.toString()}\">${potentialSkills.length} other skill(s)</a> that could potentially be part of your career.</em></p>`\n\t\n\tif (potentialTalents.length > 0)\n\t\tpotentialTalentsInfo = `<p><em>You also have <a class=\"content-link\" data-tooltip=\"${potentialTalents.toString()}\">${potentialTalents.length} other talent(s)</a> that could potentially be part of your career.</em></p>`\n\t\n\tif (potentialSkills.length > 0 || potentialTalents.length > 0)\n\t\tconclusion += `<br><em>You have \"potential\" skills and/or talents, talk to your GM. They might count towards your career!</em>`;\n\t\n\tif (doneCharacteristics >= totalCharacteristics)\n\t\tcharacteristicsComment = '<p>You have <em>enough</em> advances to complete your career!'\n\t\n\tif (doneSkills >= 8)\n\t\tskillsComment = '<p>You have <em>enough</em> advances to complete your career!'\n\t\n\tif (doneTalents >= 1)\n\t\ttalentsComment = '<p>You have <em>enough</em> talents to complete your career!'\n\t\n\t\n\tif (doneCharacteristics >= totalCharacteristics && doneSkills >= 8 && doneTalents >= 1)\n\t\tconclusion = `<strong><em>Congratulations! You can complete your current career!</em></strong>`;\n\n\t\n\tChatMessage.create({\n\t\tuser: game.user._id,\n\t\twhisper: owners,\n\t\tcontent: `\n\t\t\t<h2>${character.name}</h2>\n\t\t\t<p>Your current career is <strong>${currentCareer.name}</strong>. It is <strong>Level ${careerLevel}</strong> career, so required amount of advances is <strong>${requiredAdvances}</strong>.</p>\n\t\t\t<p>Check below if you have bought enough advances to complete your career!</p>\n\t\t\t<h3>Characteristics:</h3>\n\t\t\t<p>You have <strong>${doneCharacteristics} out of ${totalCharacteristics}</strong> required characteristics.</p>\n\t\t\t${characteristicsComment}\n\t\t\t<h3>Skills:</h3>\n\t\t\t<p>You have <strong>${doneSkills} out of 8</strong> required skills.</p>\n\t\t\t${skillsComment}\n\t\t\t${potentialSkillsInfo}\n\t\t\t<h3>Talents:</h3>\n\t\t\t<p>You have bought <strong>${doneTalents}</strong> career talents.</p>\n\t\t\t${talentsComment}\n\t\t\t${potentialTalentsInfo}\n\t\t\t<hr>\n\t\t\t<p>${conclusion}</p>\n\t\t`\n\t});\n});"
        },
        "Check Equipment for Repairs": {
            "id": "Qk0VNcvb77ANwSQY",
            "name": "Sprawdź ekwipunek wymagający naprawy",
            "command": "const api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api)\n  api.checkInventoryForDamage(actor, {paid: true});"
        },
        "Check Equipment for Repairs (Free)": {
            "id": "as22aZ3wJdi5EATf",
            "name": "Sprawdź ekwipunek wymagający naprawy (Darmowa)",
            "command": "/**\n *\n *    This Macro should be used if GM allows you to repair your items for Free \n *         (for example you have relevant Trade)\n *\n **/\n\nconst api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api)\n  api.checkInventoryForDamage(actor, {paid: false});"
        },
        "Generate Ingredient for Spell": {
            "id": "9W3cMh8pHiAdLl0y",
            "name": "Stwórz Składnik Zaklęcia",
            "command": "const allowedLores = [\n  'fire',\n  'heavens',\n  'metal',\n  'beasts',\n  'life',\n  'light',\n  'death',\n  'shadow',\n  'hedgecraft',\n  'witchcraft'\n];\n\nconst compendium = \"Compendium.forien-armoury.forien-armoury.Item.\"\n\nconst loreIngredients = {\n  fire: \"Fyaz0um5STWsmcL7\",\n  heavens: \"rX639Tm9dTFGgdEs\",\n  metal: \"0Xe2tUDjV3jR2o17\",\n  beasts: \"0IzPuMHA4a4P0PYB\",\n  life: \"G4EdPUHqekDS6kj8\",\n  light: \"uCGbBeMU5TUZPoba\",\n  death: \"VuO1EDySwVbmtdcH\",\n  shadow: \"rsQryOWSCufQnNAC\",\n  hedgecraft: \"gEnMIQ1x4ETY1gCB\",\n  witchcraft: \"relq8BaanmuOaPEP\"\n}\n\nif (!actor)\n  return ui.notifications.notify(game.i18n.localize('Forien.Armoury.Macros.MustControlActor'), 'warning')\n\nconst spells = actor.itemCategories.spell;\nlet options = \"\";\n\nspells.forEach(spell => {\n  if (allowedLores.includes(spell.lore.value)) {\n    options += `<option value=\"${spell.uuid}\">${spell.name} (CN: ${spell.cn.value})</option>`;\n  }\n})\n\nconst dialog = new Dialog({\n  title: game.i18n.localize('Forien.Armoury.Macros.SelectSpell'),\n  content: `<form>\n              <div class=\"form-group\">\n                <label>${game.i18n.localize('Forien.Armoury.Macros.AvailableSpells')}</label> \n\t\t\t\t<select name=\"spell-id\" id=\"spell-id\">\n\t\t\t\t   ${options}\n\t\t\t\t</select>\n              </div>\n          </form>`,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: game.i18n.localize('Forien.Armoury.Macros.Generate'),\n      callback: html => {\n        let spellUuid = html.find(\"#spell-id\").val()\n        let spell = fromUuidSync(spellUuid);\n        let lore = spell.lore.value;\n        let uuid = compendium + loreIngredients[lore];\n        let baseIngredientPromise = fromUuid(uuid)\n\n        baseIngredientPromise.then(baseIngredient => {\n\n          const origData = baseIngredient.toObject();\n          let ingredient;\n          let template = {data: game.system.model.Item[baseIngredient.type]};\n          let ingredientData = mergeObject(template, origData);\n\n          let ingredientFor = game.i18n.localize('Forien.Armoury.Macros.IngredientFor');\n          ingredientData.name = `${ingredientFor} ${spell.name}`;\n          switch (lore.toLowerCase()) {\n            case 'hedgecraft':\n              ingredientData.system.price.bp = 5;\n              break;\n            case 'witchcraft':\n              ingredientData.system.price.bp = spell.cn.value;\n              break;\n            default:\n              ingredientData.system.price.ss = spell.cn.value;\n          }\n          ingredientData.system.spellIngredient.value = spell._id;\n\n          Item.implementation.create(ingredientData, {renderSheet : true});\n        })\n      }\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: game.i18n.localize('Forien.Armoury.Macros.Cancel')\n    }\n  },\n  default: \"yes\"\n}).render(true)"
        },
        "Item Browser": {
            "id": "1WqROT91wAnInAph",
            "name": "Przeglądaj Przedmioty",
            "command": "new BrowserWfrp4e().render(true);"
        },
        "Repair Blackpowder Weapons": {
            "id": "IDjpnfRmka1ABhTe",
            "name": "Napraw Broń Czarnoprochową",
            "command": "const api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api && scope.buyer && scope.userId) {\n  api.checkInventoryForDamage(scope.buyer, {\n    paid: true,\n    type: \"weapons\",\n    subtype: \"blackpowder,engineering,explosives\",\n    user: scope.userId\n  });\n}"
        },
        "Repair Melee Weapons": {
            "id": "SePhG2mBoIou48Iq",
            "name": "Napraw Broń Białą",
            "command": "const api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api && scope.buyer && scope.userId) {\n  api.checkInventoryForDamage(scope.buyer, {\n    paid: true,\n    type: \"weapons\",\n    subtype: \"basic,cavalry,fencing,brawling,flail,parry,polearm,twohanded\",\n    user: scope.userId\n  });\n}"
        },
        "Repair Metal Armour": {
            "id": "6JEPmUvfBIWCl7KA",
            "name": "Napraw Metalowy Pancerz",
            "command": "const api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api && scope.buyer && scope.userId) {\n  api.checkInventoryForDamage(scope.buyer, {\n    paid: true,\n    type: \"armour\",\n    subtype: \"mail,plate\",\n    user: scope.userId\n  });\n}"
        },
        "Repair Ranged Weapons": {
            "id": "if2Jjjj3Ef2cYNAm",
            "name": "Napraw Broń Zasięgową",
            "command": "const api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api && scope.buyer && scope.userId) {\n  api.checkInventoryForDamage(scope.buyer, {\n    paid: true,\n    type: \"weapons\",\n    subtype: \"bow,crossbow,entangling,sling,throwing\",\n    user: scope.userId\n  });\n}"
        },
        "Repair Soft Armour": {
            "id": "uIYZoqoZNuHp6zA2",
            "name": "Napraw Pancerz Skórzany",
            "command": "const api = game.modules.get(\"forien-armoury\")?.api.itemRepair;\n\nif (api && scope.buyer && scope.userId) {\n  api.checkInventoryForDamage(scope.buyer, {\n    paid: true,\n    type: \"armour\",\n    subtype: \"softLeather\",\n    user: scope.userId\n  });\n}"
        },
        "Set Infighting (targets)": {
            "id": "ynLKA5lklO79GE9P",
            "name": "Wejdź w \"Skrócenie Dystansu\" (z celami)",
            "command": "let targets = game.user.targets;\n\ntargets.forEach(tkn => {\n    let actor = tkn.actor;\n    actor.addSystemEffect('infighting')\n});"
        },
        "Set Token Friendly": {
            "id": "Os0KUwlf9cIuNNWe",
            "name": "Zmień znacznik na przyjazny",
            "command": "async function setToken(token, disp)\n{\n\tawait token.document.update({disposition: disp});\n\ttoken.refresh(true);\n}\n\ncanvas.tokens.controlled.forEach(tkn => setToken(tkn, 1));"
        },
        "Set Token Hostile": {
            "id": "Ak5P5kquz9zT5Rv2",
            "name": "Zmień znacznik na wrogi",
            "command": "async function setToken(token, disp)\n{\n\tawait token.document.update({disposition: disp});\n\ttoken.refresh(true);\n}\n\ncanvas.tokens.controlled.forEach(tkn => setToken(tkn, -1));"
        },
        "Set Token Neutral": {
            "id": "iPlXQiBGBjbmW0SW",
            "name": "Zmień znacznik na neutralny",
            "command": "async function setToken(token, disp)\n{\n\tawait token.document.update({disposition: disp});\n\ttoken.refresh(true);\n}\n\ncanvas.tokens.controlled.forEach(tkn => setToken(tkn, 0));"
        }
    }
}
